@inject IDimensionService dimensionService
@inject IElementService elementService
@using IntusWindows.Sales.Order.Web.Services.Interfaces
@using IntusWindows.Sales.Order.Web.Services.Services
@using Microsoft.AspNetCore.Components
@using IntusWindows.Sales.Contract.DTOs
@using IntusWindows.Sales.Contract.Models.Map
@using IntusWindows.Sales.Contract.Utils
@implements IDisposable;
@inject ProgressService progressService;

<button class="btn btn-primary" @onclick="() => dialog.Show()">Create New Element</button>
<DialogBase @ref="dialog" Title="Create new element" OnSave="OnSave" CreateButtonText="Save" IsSave="true">

    <div>
        <input placeholder="@Element.Name" @bind-value="Element.Name"/>

        <select id="@Element.DimensionId" @bind="@Element.DimensionId">
             @foreach (var dimension in dimensions)
            {
               <option value="@dimension.id"> @dimension.id @dimension.title</option>
            }
        </select>

        
    </div>


</DialogBase>
<Notification IsVisible="ShowNotification" Message="@message"></Notification>


@code

{
    private DialogBase dialog;
    long Progress;
    string message;
    bool ShowNotification { get; set; } = false;
    [Parameter]
    public HubConnection? hubConnection { get; set; }

    List<DimensionDTO> dimensions { get; set; } = new List<DimensionDTO>();

    Mapper.Element Element { get; set; } = new Mapper.Element();

    protected override async Task OnInitializedAsync()
    {
        progressService.ProgressChanged += OnProgressChanged;
        dimensions.Clear();
        dimensions.AddRange(await dimensionService.GetAllDimensionsListAsync());

    }

    void OnProgressChanged(object sender, long progress)
    {
        this.Progress = progress;
        StateHasChanged();
    }


    async Task OnSave()
    {

        Element.Id = Guid.NewGuid();
        try
        {
            ValidatorFactory.Validate(Element);
        }
        catch (Exception ex)
        {
            message = ex.Message;
            ShowNotification = true;
            StateHasChanged();
            await Task.Delay(TimeSpan.FromSeconds(3.5));
            ShowNotification = false;
            StateHasChanged();
        }

        Progress = 0;
        var res= await elementService.CreateElement(Element);
        if (res.Ok && hubConnection != null)
        {
            string dimensionId = Element.DimensionId;
            decimal width, height;
            decimal.TryParse(dimensionId.Split('-')[1].Split('X')[0], out width);

            decimal.TryParse(dimensionId.Split('-')[1].Split('X')[1],out height);

            await hubConnection.InvokeAsync(HubMethods.BroadcastToGroup, HubOperations.Created,
                                                new ElementDTO(Element.Id, Element.Name,width, height,Element.DimensionId));

            dialog.CloseDialog();
        }


    }
    public void Dispose() =>
       progressService.ProgressChanged -= OnProgressChanged;

    }

