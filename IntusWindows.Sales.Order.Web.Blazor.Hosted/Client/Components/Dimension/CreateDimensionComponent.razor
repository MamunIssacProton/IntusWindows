@inject IDimensionService dimensionService

<button class="btn btn-primary" @onclick="() => dialog.Show()">Create new Dimension</button>
<DialogBase @ref="dialog" Title="Create new Dimension">
    <FormBase T="Mapper.Dimension" HasDimensions="true" OnModelCreate="OnDimensionCreated" SaveButtonText="Create Dimension"></FormBase>
</DialogBase>
<Notification IsVisible="ShowNotification" Message="@message"></Notification>

@code {
    private DialogBase dialog;
    string message;
    bool ShowNotification { get; set; } = false;
    [Parameter]
    public HubConnection? hubConnection { get; set; }

    async Task OnDimensionCreated(Mapper.Dimension dimension)
    {
        try
        {
            ValidatorFactory.Validate(dimension);

        }
        catch (Exception ex)
        {
            message = ex.Message;
            ShowNotification = true;
            StateHasChanged();
            await Task.Delay(TimeSpan.FromSeconds(3.5));
            ShowNotification = false;
            StateHasChanged();

        }


        var res = await dimensionService.SaveDimensionAsync(dimension);
        if (res.Ok && hubConnection != null)
        {
            await hubConnection.InvokeAsync(HubMethods.BroadcastToGroup, HubOperations.Created,
                                            new DimensionDTO($"{dimension.ElementType.ToString()}-{dimension.Width} X {dimension.Height}",
                                            dimension.Width, dimension.Height, dimension.Title));
            dialog.CloseDialog();
        }

    }


}

