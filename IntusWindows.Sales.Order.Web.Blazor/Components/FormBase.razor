@typeparam T

@if (HasDimensions)
{
    var property = typeof(T).GetProperties().Where(x => x.PropertyType.IsEnum).First();
    SkipProperty = property.Name;
    <label>@property.Name</label>
    <select @bind="@InputValues[property.Name]">
        @foreach (var elementType in Enum.GetValues(typeof(ElementType)))
        {
            <option value="@elementType">@elementType</option>
        }
    </select>

}
@foreach (var property in typeof(T).GetProperties())
{
    if (!string.IsNullOrEmpty(SkipProperty))
    {
        if (property.Name == SkipProperty)
            continue;
    }

    <div class="form-group">
        <label>@property.Name</label>
        @if (property.PropertyType == typeof(string))
        {
            <input type="text" @bind-value="@InputValues[property.Name]" @oninput="() => property.SetValue(Model, InputValues[property.Name])" />
        }
        else if (property.PropertyType == typeof(int))
        {
            <input type="number" @bind-value="@InputValues[property.Name]" @oninput="() => property.SetValue(Model, int.TryParse(InputValues[property.Name], out var value) ? value : 0)" />
        }
        else if (property.PropertyType == typeof(decimal))
        {
            <input type="number" step="0.01" @bind-value="@InputValues[property.Name]" @oninput="() => property.SetValue(Model, decimal.TryParse(InputValues[property.Name], out var value) ? value : 0)" />
        }


    </div>

}

<div>
    <button type="button" class="btn btn-primary" @onclick="Create">@SaveButtonText</button>
</div>

@code {

    protected T Model { get; set; }


    public Dictionary<string, string> InputValues { get; set; } = new Dictionary<string, string>();

    [Parameter]
    public bool HasDimensions { get; set; } = false;

    [Parameter]
    public string SkipProperty { get; set; } = string.Empty;


    public FormBase()
    {
        Model = Activator.CreateInstance<T>();

        foreach (var property in typeof(T).GetProperties())
        {

            InputValues[property.Name] = property.GetValue(Model)?.ToString();
        }
        
    }

    [Parameter]
    public EventCallback<T> OnModelCreate { get; set; }

    [Parameter]
    public string SaveButtonText { get; set; } = "Save Data";

    protected void MapInputValuesToModel()
    {
        foreach (var property in typeof(T).GetProperties())
        {

            if (InputValues.ContainsKey(property.Name))
            {
                switch (property.PropertyType)
                {
                    case Type guidType when guidType == typeof(Guid):

                        break;
                    case Type decimalType when decimalType == typeof(decimal):

                        property.SetValue(Model, decimal.Parse(InputValues[property.Name]));

                        break;
                    case Type intType when intType == typeof(int):

                        property.SetValue(Model, int.Parse(InputValues[property.Name]));

                        break;
                    case Type enumType when enumType == typeof(ElementType):

                        property.SetValue(Model, Enum.Parse(property.PropertyType, InputValues[property.Name]));
                        break;
                    default:

                        property.SetValue(Model, InputValues[property.Name]);
                        break;
                }

            }

        }
    }


    protected async void Create()
    {
        MapInputValuesToModel();
        HasDimensions = false;

        await OnModelCreate.InvokeAsync(Model);

    }

}